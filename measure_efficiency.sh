#!/bin/bash

# Simple and Reliable Performance Measurement Tool
# Measures actual execution times and calculates efficiency improvements

echo "üéØ Morphosis Efficiency Measurement Tool"
echo "======================================="

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Configuration
GRID_SIZE=25
STEP_SIZE=0.15
ITERATIONS=4
RESULTS_FILE="efficiency_results.txt"

# Function to measure execution time
measure_execution_time() {
    local executable="$1"
    local version="$2"

    echo -e "${BLUE}Testing $version version...${NC}"

    # Create temporary file for output
    local temp_output="/tmp/morphosis_${version}_output.txt"

    # Measure time using date command (more reliable)
    local start_time=$(date +%s.%N)

    # Run the program and capture output
    echo "$ITERATIONS" | timeout 300 "$executable" "$STEP_SIZE" -0.2 0.8 0.0 0.0 > "$temp_output" 2>&1
    local exit_code=$?

    local end_time=$(date +%s.%N)

    # Calculate execution time
    local execution_time=$(echo "$end_time - $start_time" | bc -l 2>/dev/null || echo "0")

    # Extract triangle count from output
    local triangle_count=$(grep -o "Generated [0-9]* triangles" "$temp_output" | grep -o "[0-9]*" | tail -1)
    if [ -z "$triangle_count" ]; then
        triangle_count="0"
    fi

    # Check if program completed successfully
    if [ $exit_code -eq 0 ] || [ $exit_code -eq 139 ]; then  # 139 is segfault, but we still got output
        echo -e "${GREEN}‚úì $version completed in ${execution_time}s, generated $triangle_count triangles${NC}"
    else
        echo -e "${RED}‚úó $version failed with exit code $exit_code${NC}"
        execution_time="0"
    fi

    # Cleanup
    rm -f "$temp_output"

    echo "$execution_time"
}

# Function to log results
log_results() {
    local original_time="$1"
    local optimized_time="$2"
    local original_triangles="$3"
    local optimized_triangles="$4"

    # Calculate efficiency metrics
    local speedup=$(echo "scale=2; $original_time / $optimized_time" | bc -l 2>/dev/null || echo "1.0")
    local improvement_percent=$(echo "scale=1; ($speedup - 1) * 100" | bc -l 2>/dev/null || echo "0")
    local time_saved=$(echo "scale=2; $original_time - $optimized_time" | bc -l 2>/dev/null || echo "0")

    # Create results file
    cat > "$RESULTS_FILE" << EOF
üöÄ MORPHOSIS OPTIMIZATION EFFICIENCY RESULTS
==========================================
Test Configuration:
- Grid Size: ${GRID_SIZE}x${GRID_SIZE}x${GRID_SIZE}
- Step Size: $STEP_SIZE
- Iterations: $ITERATIONS
- Test Date: $(date)

üìä PERFORMANCE METRICS
=====================
Original Version:
  Execution Time: ${original_time}s
  Triangles Generated: $original_triangles

Optimized Version:
  Execution Time: ${optimized_time}s
  Triangles Generated: $optimized_triangles

üéØ EFFICIENCY ANALYSIS
=====================
Speedup: ${speedup}x faster
Performance Improvement: ${improvement_percent}%
Time Saved: ${time_saved}s
Quality Verification: $([ "$original_triangles" = "$optimized_triangles" ] && echo "‚úì Same quality" || echo "‚ö† Different results")

üí° INTERPRETATION
================
EOF

    # Add interpretation based on results
    if (( $(echo "$speedup > 5" | bc -l) )); then
        echo "üî• EXCELLENT: Optimizations provide outstanding performance improvements!" >> "$RESULTS_FILE"
    elif (( $(echo "$speedup > 2" | bc -l) )); then
        echo "‚úÖ GOOD: Optimizations provide significant performance improvements." >> "$RESULTS_FILE"
    elif (( $(echo "$speedup > 1.5" | bc -l) )); then
        echo "üëç MODERATE: Optimizations provide noticeable performance improvements." >> "$RESULTS_FILE"
    elif (( $(echo "$speedup > 1.1" | bc -l) )); then
        echo "‚ö†Ô∏è  MINIMAL: Optimizations provide small performance improvements." >> "$RESULTS_FILE"
    else
        echo "‚ùå INEFFECTIVE: Optimizations provide no significant performance improvements." >> "$RESULTS_FILE"
    fi

    echo "" >> "$RESULTS_FILE"
    echo "Generated by Morphosis Efficiency Measurement Tool" >> "$RESULTS_FILE"
    echo "Timestamp: $(date)" >> "$RESULTS_FILE"
}

# Main execution
echo -e "${BLUE}Starting efficiency measurement...${NC}"
echo "Configuration: ${GRID_SIZE}x${GRID_SIZE}x${GRID_SIZE} grid, step $STEP_SIZE, $ITERATIONS iterations"
echo ""

# Check if executables exist
if [ ! -f "./morphosis" ]; then
    echo -e "${RED}Error: ./morphosis not found! Please build the original version first.${NC}"
    exit 1
fi

if [ ! -f "./morphosis_optimized" ]; then
    echo -e "${RED}Error: ./morphosis_optimized not found! Please build the optimized version first.${NC}"
    exit 1
fi

# Measure original version
echo -e "${YELLOW}Phase 1: Testing Original Version${NC}"
original_time=$(measure_execution_time "./morphosis" "Original")
original_triangles=$(echo "$ITERATIONS" | timeout 300 ./morphosis "$STEP_SIZE" -0.2 0.8 0.0 0.0 2>/dev/null | grep -o "Generated [0-9]* triangles" | grep -o "[0-9]*" | tail -1)

echo ""

# Measure optimized version
echo -e "${YELLOW}Phase 2: Testing Optimized Version${NC}"
optimized_time=$(measure_execution_time "./morphosis_optimized" "Optimized")
optimized_triangles=$(echo "$ITERATIONS" | timeout 300 ./morphosis_optimized "$STEP_SIZE" -0.2 0.8 0.0 0.0 2>/dev/null | grep -o "Generated [0-9]* triangles" | grep -o "[0-9]*" | tail -1)

echo ""

# Calculate and display results
echo -e "${YELLOW}Phase 3: Calculating Efficiency Metrics${NC}"

# Calculate metrics
speedup=$(echo "scale=2; $original_time / $optimized_time" | bc -l 2>/dev/null || echo "1.0")
improvement_percent=$(echo "scale=1; ($speedup - 1) * 100" | bc -l 2>/dev/null || echo "0")
time_saved=$(echo "scale=2; $original_time - $optimized_time" | bc -l 2>/dev/null || echo "0")

# Display results
echo ""
echo -e "${GREEN}üìä EFFICIENCY RESULTS:${NC}"
echo "========================"
echo "Original Time:    ${original_time}s"
echo "Optimized Time:   ${optimized_time}s"
echo "Speedup:          ${speedup}x faster"
echo "Improvement:      ${improvement_percent}%"
echo "Time Saved:       ${time_saved}s"
echo "Original Triangles: $original_triangles"
echo "Optimized Triangles: $optimized_triangles"

# Log detailed results
log_results "$original_time" "$optimized_time" "$original_triangles" "$optimized_triangles"

echo ""
echo -e "${GREEN}‚úÖ Efficiency measurement completed!${NC}"
echo "Detailed results saved to: $RESULTS_FILE"

# Display summary
echo ""
echo -e "${BLUE}üìã SUMMARY:${NC}"
if (( $(echo "$speedup > 2" | bc -l) )); then
    echo -e "${GREEN}üéâ EXCELLENT: Optimizations are highly effective!${NC}"
elif (( $(echo "$speedup > 1.5" | bc -l) )); then
    echo -e "${GREEN}‚úÖ GOOD: Optimizations provide significant improvements.${NC}"
elif (( $(echo "$speedup > 1.1" | bc -l) )); then
    echo -e "${YELLOW}üëç MODERATE: Optimizations provide noticeable improvements.${NC}"
else
    echo -e "${RED}‚ö†Ô∏è  LIMITED: Optimizations provide minimal improvements.${NC}"
fi
